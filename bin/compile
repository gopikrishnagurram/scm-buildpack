#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

set -e # fail fast
set -o pipefail

BUILD_DIR=$1
CACHE_DIR=$2

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

echo "=====> starting SCM buildpack compile"

if [ "$SCM_URL" == "" ]; then
  echo "=====> SCM_URL is not set, exiting"
  sleep 2;
  exit 1;
fi

SCM_URL=${SCM_URL}
echo "=====> SCM_URL is $SCM_URL"

SCM_BRANCH=${SCM_BRANCH:-master}
echo "=====> SCM_BRANCH is $SCM_BRANCH"

# temp location in case we need it for archive downloads
DIR=$(mktemp -t buildpackXXXXX)
rm -rf $DIR
mkdir -p "$DIR"

if [ "$SCM_URL" != "" ]; then
  # if [[ "$SCM_URL" =~ \.(tgz|tar\.gz)$ ]]; then
  if [[ "$SCM_URL" =~ \.(tgz)$ ]]; then
    echo "=====> Downloading tgz archive: $SCM_URL"
    curl -k -s "$SCM_URL" | tar xvz -C "$DIR" | indent
  elif [[ "$SCM_URL" =~ \.(zip)$ ]]; then
    echo "=====> Downloading zip archive: $SCM_URL"
    TEMPFILE=$(mktemp -t tempXXXXX)
    curl -k -o "$TEMPFILE" "$SCM_URL" | indent
    unzip "$TEMPFILE" -d "$DIR" | indent
    rm "$TEMPFILE"
  elif [[ "$SCM_URL" =~ \.(git)$ ]]; then
    if [[ -d $CACHE_DIR/.git ]]; then
      echo "=====> Fetching existing repo"
      cd $CACHE_DIR/.git
      git fetch origin | indent
      git checkout origin/$SCM_BRANCH | indent
    else
      echo "=====> Cloning repo for the first time"
      git clone $SCM_URL $CACHE_DIR | indent
    fi
  else
    echo "\$SCM_URL $SCM_URL was not detected as a tgz, zip or git"
    exit 1
  fi

  echo "=====> Download finished"

  echo "=====> copying contents of $DIR to $1"
  cd $DIR
  cp -R $DIR/* $1
  echo "=====> final contents of build dir"
  ls -al $1
fi
