#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# set -e # fail fast
set -o pipefail

BUILD_DIR=$1
CACHE_DIR=$2

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

if [ "${SCM_URL}X" == "X" ]; then
  echo "=====> SCM_URL is not set, exiting"
  sleep 2
  exit 1
fi

echo "=====> SCM_URL is $SCM_URL"

# temp location in case we need it for archive downloads
TEMPDIR=$(mktemp -t buildpackXXXXX)
rm -rf $TEMPDIR
mkdir -p $TEMPDIR

SCM_DIR=$CACHE_DIR/scm

# if [[ "$SCM_URL" =~ \.(tgz|tar\.gz)$ ]]; then
if [[ "$SCM_URL" =~ \.(tgz)$ ]]; then
  echo "=====> Downloading tgz archive: $SCM_URL"
  curl -k -s $SCM_URL | tar xvz -C $TEMPDIR | indent
  cp -R $TEMPDIR/* $BUILD_DIR/
elif [[ "$SCM_URL" =~ \.(zip)$ ]]; then
  echo "=====> Downloading zip archive: $SCM_URL"
  TEMPFILE=$(mktemp -t tempXXXXX)
  curl -k -o $TEMPFILE $SCM_URL | indent
  unzip $TEMPFILE -d $TEMPDIR | indent
  rm $TEMPFILE
  cp -R $TEMPDIR/* $BUILD_DIR/
elif [[ "$SCM_URL" =~ \.(git)$ ]]; then
  SCM_BRANCH=${SCM_BRANCH:-master}
  echo "=====> SCM_BRANCH is $SCM_BRANCH"
  if [[ -d $SCM_DIR/.git ]]; then
    echo "=====> Fetching existing repo"
    cd $SCM_DIR
    git fetch origin | indent
    git checkout origin/$SCM_BRANCH >/dev/null 2>&1
  else
    echo "=====> Cloning repo for the first time"
    git clone $SCM_URL $SCM_DIR | indent
  fi
  echo "CACHE_DIR -"
  ls -la $CACHE_DIR/
  echo "SCM_DIR -"
  ls -la $SCM_DIR/
  cp -R $SCM_DIR/* $BUILD_DIR/
else
  echo "! \$SCM_URL $SCM_URL was not detected as a tgz, zip or git" | indent
  exit 1
fi

echo "=====> Final cache dir listing"
ls -al $CACHE_DIR | indent

echo "=====> Final build dir listing"
ls -al $BUILD_DIR | indent