#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# set -e # fail fast
set -o pipefail

BUILD_DIR=$1
CACHE_DIR=$2

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

echo "=====> starting SCM buildpack compile"

if [ "${SCM_URL}X" == "X" ]; then
  echo "=====> SCM_URL is not set, exiting"
  sleep 2
  exit 1
fi

SCM_URL=${SCM_URL}
echo "=====> SCM_URL is $SCM_URL"

SCM_BRANCH=${SCM_BRANCH:-master}
echo "=====> SCM_BRANCH is $SCM_BRANCH"

# temp location in case we need it for archive downloads
DIR=$(mktemp -t buildpackXXXXX)
rm -rf $DIR
mkdir -p "$DIR"

APP_DIR=$CACHE_DIR/app

# if [[ "$SCM_URL" =~ \.(tgz|tar\.gz)$ ]]; then
if [[ "$SCM_URL" =~ \.(tgz)$ ]]; then
  echo "=====> Downloading tgz archive: $SCM_URL"
  curl -k -s "$SCM_URL" | tar xvz -C "$DIR" | indent
  cp -R $DIR/* $BUILD_DIR/
elif [[ "$SCM_URL" =~ \.(zip)$ ]]; then
  echo "=====> Downloading zip archive: $SCM_URL"
  TEMPFILE=$(mktemp -t tempXXXXX)
  curl -k -o "$TEMPFILE" "$SCM_URL" | indent
  unzip "$TEMPFILE" -d "$DIR" | indent
  rm "$TEMPFILE"
  cp -R $DIR/* $BUILD_DIR/
elif [[ "$SCM_URL" =~ \.(git)$ ]]; then
  git --version | indent
  ls -al $CACHE_DIR/*
  ls -al $CACHE_DIR/bundle/*
  ls -al $CACHE_DIR/heroku/*
  sleep 2
  if [[ -d $APP_DIR/.git ]]; then
    echo "=====> Fetching existing repo" | indent
    cd $APP_DIR/.git
    git fetch origin | indent
    git checkout origin/$SCM_BRANCH | indent
  else
    echo "=====> Cloning repo for the first time"
    git clone $SCM_URL $APP_DIR | indent
  fi
  cp -R $APP_DIR/* $BUILD_DIR/
else
  echo "! \$SCM_URL $SCM_URL was not detected as a tgz, zip or git" | indent
  exit 1
fi

echo "=====> Download finished"

ls -al $BUILD_DIR
